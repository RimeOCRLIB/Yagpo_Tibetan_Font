<?php//print "@@@1=".$argc."\n";//print "@@@2=".$argv[0]."\n";//find ./ -maxdepth 2 -type d -print >_3.txt    -- find directory name for zipfunction unichr($dec){  if ($dec < 0x80)  {    $utf = chr($dec);  }  else if ($dec < 0x0800)  {    $utf = chr(0xC0 + ($dec >> 6));    $utf .= chr(0x80 + ($dec & 0x3f));  }  else if ($dec < 0x010000)  {    $utf = chr(0xE0 + ($dec >> 12));    $utf .= chr(0x80 + (($dec >> 6) & 0x3f));    $utf .= chr(0x80 + ($dec & 0x3f));  }  else if ($dec < 0x200000)  {    $utf = chr(0xF0 + ($dec >> 18));    $utf .= chr(0x80 + (($dec >> 12) & 0x3f));    $utf .= chr(0x80 + (($dec >> 6) & 0x3f));    $utf .= chr(0x80 + ($dec & 0x3f));  }  else  {    die("UTF-8 character size is more than 4 bytes");  }  return $utf;}function utf8($num){    if($num<=0x7F)       return chr($num);    if($num<=0x7FF)      return chr(($num>>6)+192).chr(($num&63)+128);    if($num<=0xFFFF)     return chr(($num>>12)+224).chr((($num>>6)&63)+128).chr(($num&63)+128);    if($num<=0x1FFFFF)   return chr(($num>>18)+240).chr((($num>>12)&63)+128).chr((($num>>6)&63)+128).chr(($num&63)+128);    return '';}function Unicode_to_UTF( $input, $array=TRUE){   	$c=0; $b=0;$flag=0;	$bits=0;	$len=strlen($input);	for($i=0; $i<$len; $i++){		$c=ord($input[$i]);		if($c > 128){			if(($c >= 254)) {$flag=1; $i=$len;}//return $input;			elseif($c >= 252) $bits=6;			elseif($c >= 248) $bits=5;			elseif($c >= 240) $bits=4;			elseif($c >= 224) $bits=3;			elseif($c >= 192) $bits=2;			else {$flag=1; $i=$len;}			if(($i+$bits) > $len) {$flag=1; $i=$len;}//return $input;			while($bits > 1){				$i++;				$b=ord($input[$i]);				if($b < 128 || $b > 191) {$flag=1; $i=$len;}//return $input;				$bits--;			}		}	}	if(!$flag==1)return $input;			$utf = '';		if(!is_array($input)){			//$input     = str_replace('&#', '', $input);			//$input     = explode(';', $input);			//$len = count($input);			//unset($input[$len-1]);			$input=str_split($input);			$count=count($input);			for($i=0; $i < $count; $i++)$input[$i]=ord($input[$i]);					}else{$count=count($input);}				for($i=0; $i < $count; $i++){			//print $input[$i];			//print "__$i<br>";			if ( $input[$i] <128 ){				$byte1 = $input[$i];				$utf  .= chr($byte1);			}			if ( $input[$i] >=128 && $input[$i] <=2047 ){				//__set_win_1251 charset___			  if($input[$i]>191&&$input[$i]<256)$input[$i]+=848;			  if($input[$i]==184)$input[$i]=0x0451;			  if($input[$i]==168)$input[$i]=0x0401;								$byte1 = 192 + (int)($input[$i] / 64);				$byte2 = 128 + ($input[$i] % 64);				$utf  .= chr($byte1).chr($byte2);															}			if ( $input[$i] >=2048 && $input[$i] <=65535){				$byte1 = 224 + (int)($input[$i] / 4096);				$byte2 = 128 + ((int)($input[$i] / 64) % 64);				$byte3 = 128 + ($input[$i] % 64);								$utf  .= chr($byte1).chr($byte2).chr($byte3);				//print $utf;				//print "___<br>";			}			if ( $input[$i] >=65536 && $input[$i] <=2097151){								$byte1 = 240 + (int)($input[$i] / 262144);				$byte2 = 128 + ((int)($input[$i] / 4096) % 64);				$byte3 = 128 + ((int)($input[$i] / 64) % 64);				$byte4 = 128 + ($input[$i] % 64);				$utf  .= chr($byte1).chr($byte2).chr($byte3).				chr($byte4);			}			if ( $input[$i] >=2097152 && $input[$i] <=67108863){								$byte1 = 248 + (int)($input[$i] / 16777216);				$byte2 = 128 + ((int)($input[$i] / 262144) % 64);				$byte3 = 128 + ((int)($input[$i] / 4096) % 64);				$byte4 = 128 + ((int)($input[$i] / 64) % 64);				$byte5 = 128 + ($input[$i] % 64);				$utf  .= chr($byte1).chr($byte2).chr($byte3).				chr($byte4).chr($byte5);			}			if ( $input[$i] >=67108864 && $input[$i] <=2147483647){								$byte1 = 252 + ($input[$i] / 1073741824);				$byte2 = 128 + (($input[$i] / 16777216) % 64);				$byte3 = 128 + (($input[$i] / 262144) % 64);				$byte4 = 128 + (($input[$i] / 4096) % 64);				$byte5 = 128 + (($input[$i] / 64) % 64);				$byte6 = 128 + ($input[$i] % 64);				$utf  .= chr($byte1).chr($byte2).chr($byte3).				chr($byte4).chr($byte5).chr($byte6);			}		}	    	    		return $utf;}//_____________________________________________________________________function readText($filename){		$fp = fopen("$filename", 'a+')or die("... no open $filename");		$fx=fread($fp,filesize($filename));		fclose($fp);        return $fx;  };function writeText($text,$filename){		$fp = fopen("$filename", 'w+')or die("... no open $filename");		if (flock($fp, LOCK_EX)) { // do an exclusive lock			fwrite($fp,$text); flock($fp, LOCK_UN); // release the lock  	    } else {echo "Couldn't write temp file $filename"; exit(0); }  	    fclose($fp);	};  	    print "@@@3=".$argv[1]."\n";$path_list=$argv[1];$path_name=$argv[2];$uni=Array();$ligaTable=""; 		    $text=readText($path_list); 		    $liga=explode("\n",$text); 		    for($i=0;$i<count($liga);$i++){ 		    	$line=explode("\t",$liga[$i]); 		    	 		    	//print $line[0]."\n"; 		    	//$c=unichr($line[0]); 		    	//print Unicode_to_UTF($c)."\n"; 		    	//$ligaTable.=Unicode_to_UTF($c).":|:".$line[0].":|:".$line[1].":|:\n"; 		    	$ligaTable.="&#x$line[0]:|:".$line[0].":|:".$line[1].":|:<br>\n";  		    	 		    }			writeText($ligaTable,$path_list.".html");?>